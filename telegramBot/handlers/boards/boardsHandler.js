import { Markup } from 'telegraf';
import { getBoardsWithTaskCounts } from '../../../utils/helpers/boardHelpers.js';
import { getColorEmoji } from '../../utils/color/getColorEmoji.js';
import send from '../../send.js';

export async function boardsHandler(ctx) {
  const user = ctx.state.user;
  const userUuid = user.userUuid;

  try {
    const { boards, totalBoards } = await getBoardsWithTaskCounts(userUuid);

    if (boards.length === 0) {
      return send(ctx, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å–æ–∫.');
    }

    const boardListText = boards
      .map((board, index) => {
        const pinMark = board.isPinned ? 'üìå ' : '';
        const favMark = board.isFavorite ? '‚≠ê ' : '';
        const colorEmoji = getColorEmoji(board.color || '');

        return (
          `${index + 1}. ${pinMark}${favMark}<b>${board.title}</b>\n` +
          `   –ó–∞–¥–∞—á: ${board.taskCount}\n` +
          `   –¶–≤–µ—Ç: ${colorEmoji}\n` +
          `   –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date(board.updatedAt).toLocaleDateString('ru-RU', {weekday: 'short', day: 'numeric', month: 'long', year: 'numeric',   hour: '2-digit', minute: '2-digit'})}`
        );
      })
      .join('\n\n');

    const keyboard = Markup.inlineKeyboard([
      Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back_to_main'),
    ]);

    await send(
      ctx,
      `üóÇ <b>–í–∞—à–∏ –¥–æ—Å–∫–∏ (${totalBoards}):</b>\n\n${boardListText}`,
      keyboard
    );
  } catch (error) {
    console.error('[boardsHandler] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å–æ–∫:', error);
    await send(ctx, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å–æ–∫.');
  }
}
