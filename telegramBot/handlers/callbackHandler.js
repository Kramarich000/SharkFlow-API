import { authenticateTelegramMiddleware } from '../../middlewares/http/authenticateTelegramMiddleware.js';
import { showProfileHandler } from './users/showProfileHandler.js';
import { getBoardsHandler } from './boards/getBoardsHandler.js';
import { logoutHandler } from './users/logoutHandler.js';
import { mainMenuHandler } from './mainMenuHandler.js';
import { showHelpHandler } from './users/showHelpHandler.js';
import send from '../send.js';
import { createBoardsHandler } from './boards/createBoardHandler.js';

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—à–µ–Ω–æ–≤
 * @param {string} ctx - –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç TG
 * @returns {void} - –Ω–∏—á–µ–≥–æ
 * @example
 * bot.on('callback_query', callbackHandler);
 * –í –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —ç–∫—à–µ–Ω—ã –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫–∏
 * –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ –≤ –∫–Ω–æ–ø–∫–µ:
 * @example
 * Markup.button.callback('üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'show_profile'),
 * –ó–∞—Ç–µ–º –≤–Ω—É—Ç—Ä–∏ case –≤—ã–∑—ã–≤–∞–µ–º –º–∏–¥–¥–ª–≤–∞—Ä—å –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —ç–∫—à–µ–Ω–æ–≤ –∏ –ø–æ—Å–ª–µ –≤—ã–∑—ã–≤–∞–µ–º —Ö–µ–Ω–¥–ª–µ—Ä —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ª–æ–≥–∏–∫—É –≤—ã–∑–æ–≤–∞
 */
export async function callbackHandler(ctx) {
  const callbackData = ctx.callbackQuery?.data;

  if (!callbackData) {
    return;
  }

  await ctx.answerCbQuery();

  switch (callbackData) {
    case 'show_profile':
      await authenticateTelegramMiddleware(ctx, async () => {
        await showProfileHandler(ctx);
      });
      break;

    case 'show_boards':
      await authenticateTelegramMiddleware(ctx, async () => {
        await getBoardsHandler(ctx);
      });
      break;

    case 'create_board':
      await authenticateTelegramMiddleware(ctx, async () => {
        await createBoardsHandler(ctx);
      });
      break;

    case 'logout':
      await authenticateTelegramMiddleware(ctx, async () => {
        await logoutHandler(ctx);
      });
      break;

    case 'back_to_main':
      await authenticateTelegramMiddleware(ctx, async () => {
        await mainMenuHandler(ctx);
      });
      break;

    case 'help':
      await showHelpHandler(ctx);
      break;

    default:
      await send(ctx, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
  }
}
