/**
 * @module telegramBot/commands/auth/start
 * @description –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Telegram –±–æ—Ç–µ.
 */
import { Markup } from 'telegraf';
import prisma from '#utils/prismaConfig/prismaClient.js';
import { logTelegramCommandError } from '#utils/loggers/telegramLoggers.js';
import { getUserTempData, deleteUserTempData } from '#store/userTempData.js';
import send from '#telegramBot/send.js';

export default function registerStartCommand(bot) {
  bot.start(async (ctx) => {
    const authUrl = 'https://sharkflow.onrender.com/';

    const messageText = ctx.message?.text || '';

    const args = messageText.split(' ');
    const nonce = args[1];

    const telegramId = ctx.from?.id?.toString();

    if (!telegramId) {
      return await send(ctx, '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å Telegram ID');
    }

    const existingOAuth = await prisma.userOAuth.findFirst({
      where: {
        provider: 'telegram',
        providerId: telegramId,
        user: {
          isDeleted: false,
        },
      },
    });

    if (existingOAuth) {
      return await send(ctx, '–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.');
    }

    if (!nonce || typeof nonce !== 'string' || nonce.length > 100) {
      return await send(
        ctx,
        `–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏: ${authUrl}`,
      );
    }

    let userUuid;

    try {
      const data = await getUserTempData('telegramAuth', nonce);

      if (!data) {
        return await send(
          ctx,
          `–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç—ë–∫ –∏–ª–∏ –æ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${authUrl}`,
        );
      }

      userUuid = data?.userUuid;

      if (typeof userUuid !== 'string') {
        logTelegramCommandError(
          'start',
          userUuid,
          new Error('–û–∂–∏–¥–∞–ª–∞—Å—å —Å—Ç—Ä–æ–∫–∞ –¥–ª—è userUuid'),
        );
        return await send(
          ctx,
          '–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram. –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
        );
      }

      await deleteUserTempData('telegramAuth', nonce);

      const user = await prisma.user.findFirst({
        where: { uuid: userUuid, isDeleted: false },
        select: { id: true },
      });

      if (!user) {
        logTelegramCommandError(
          'start',
          userUuid,
          new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'),
        );
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ');
        return;
      }

      const userOAuthExists = await prisma.userOAuth.findFirst({
        where: {
          userId: user.id,
          provider: 'telegram',
        },
      });

      if (userOAuthExists) {
        return await send(ctx, '–í—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ Telegram –∫ —Å–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.');
      }

      const conflictOAuth = await prisma.userOAuth.findFirst({
        where: {
          provider: 'telegram',
          providerId: telegramId,
          userId: { not: user.id },
        },
      });

      if (conflictOAuth) {
        return await send(
          ctx,
          '–≠—Ç–æ—Ç Telegram —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.',
        );
      }

      await prisma.userOAuth.create({
        data: {
          userId: user.id,
          provider: 'telegram',
          providerId: telegramId,
          enabled: true,
        },
      });

      const message = `
        ‚úÖ <b>Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É!</b>
        
        –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å–∫–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏!.
      `.trim();

      const keyboard = Markup.inlineKeyboard([
        Markup.button.callback('üéØ –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é', 'back_to_main'),
      ]);

      return await send(ctx, message, keyboard);
    } catch (error) {
      logTelegramCommandError('start', userUuid, error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ Telegram');
    }
  });
}
