import { Markup } from 'telegraf';
import prisma from '../../../utils/prismaConfig/prismaClient.js';
import {
  getUserTempData,
  deleteUserTempData,
} from '../../../store/userTempData.js';
import send from '../../send.js';

export default function registerStartCommand(bot) {
  bot.start(async (ctx) => {
    const authUrl = 'https://sharkflow.onrender.com/';

    const messageText = ctx.message?.text || '';

    const args = messageText.split(' ');
    const nonce = args[1];
    
    const telegramId = BigInt(ctx.from?.id);

    const existingUser = await prisma.user.findFirst({
      where: { telegramId, isDeleted: false },
    });

    if (existingUser) {
      return await send(ctx, '–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.');
    }

    if (!nonce || typeof nonce !== 'string' || nonce.length > 100) {
      return await send(
        ctx,
        `–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏: ${authUrl}`,
      );
    }

    try {
      const data = await getUserTempData('telegramAuth', nonce);

      if (!data) {
        return await send(
          ctx,
          `–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç—ë–∫ –∏–ª–∏ –æ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${authUrl}`,
        );
      }

      const userUuid = data?.userUuid;

      if (typeof userUuid !== 'string') {
        console.error(
          '[start] –û–∂–∏–¥–∞–ª–∞—Å—å —Å—Ç—Ä–æ–∫–∞ –¥–ª—è userUuid, –ø–æ–ª—É—á–µ–Ω–æ:',
          userUuid,
        );
        return await send(
          ctx,
          '–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram. –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
        );
      }

      await deleteUserTempData('telegramAuth', nonce);

      const user = await prisma.user.findFirst({
        where: { uuid: userUuid, isDeleted: false },
        select: { telegramId: true },
      });

      if (!user) {
        return await send(
          ctx,
          '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –∏—Å—Ç—ë–∫.',
        );
      }

      if (user.telegramId) {
        return await send(ctx, '–í—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ Telegram –∫ —Å–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.');
      }

      const existingUserWithTelegramId = await prisma.user.findFirst({
        where: {
          telegramId,
          isDeleted: false,
          uuid: { not: userUuid },
        },
      });

      if (existingUserWithTelegramId) {
        return await send(
          ctx,
          '–≠—Ç–æ—Ç Telegram —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.',
        );
      }

      await prisma.user.update({
        where: { uuid: userUuid },
        data: { telegramId },
      });

      const message = `
        ‚úÖ <b>Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É!</b>
        
        –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å–∫–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏!.
      `.trim();

      const keyboard = Markup.inlineKeyboard([
        Markup.button.callback('üéØ –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é', 'back_to_main'),
      ]);

      return await send(ctx, message, keyboard);
    } catch (e) {
      console.error('[start] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ Telegram:', e);
      return await send(ctx, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
}
