// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid()) @db.Uuid
  login     String   @unique @db.VarChar(30)
  password  String?
  role      UserRole @default(user)
  avatarUrl String?  @db.VarChar(1024)
  publicId  String?  @db.VarChar(100)

  email       String  @unique @db.VarChar(320)
  googleEmail String? @unique @db.VarChar(320)
  githubEmail String? @unique @db.VarChar(320)
  yandexEmail String? @unique @db.VarChar(320)

  googleSub          String?  @unique @db.VarChar(255)
  googleOAuthEnabled Boolean  @default(false)
  telegramId         BigInt?  @unique
  telegramEnabled    Boolean? @default(false)
  githubId           String?  @unique @db.VarChar(255)
  githubOAuthEnabled Boolean? @default(false)
  yandexId           String?  @unique @db.VarChar(255)
  yandexOAuthEnabled Boolean? @default(false)

  createdAt DateTime  @default(now())
  isActive  Boolean   @default(true)
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  twoFactorSecret        String? @db.VarChar(256)
  twoFactorEnabled       Boolean @default(false)
  twoFactorPendingSecret String? @db.VarChar(256)

  boards               Board[]
  refreshTokens        RefreshToken[]
  userDeviceSessions   UserDeviceSession[]
  twoFactorBackupCodes TwoFactorBackupCode[]

  @@index([uuid, isDeleted])
  @@index([email, isDeleted])
  @@map("users")
}

model UserDeviceSession {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  deviceId    String  @db.VarChar(255)
  deviceType  String? @db.VarChar(100)
  deviceBrand String? @db.VarChar(100)
  deviceModel String? @db.VarChar(100)

  osName    String? @db.VarChar(100)
  osVersion String? @db.VarChar(100)

  clientName    String? @db.VarChar(100)
  clientVersion String? @db.VarChar(100)
  clientType    String? @db.VarChar(100)

  ipAddress   String?   @db.VarChar(45)
  geoLocation Json?
  userAgent   String?   @db.VarChar(512)
  referrer    String?   @db.VarChar(2048)
  createdAt   DateTime  @default(now())
  lastUsedAt  DateTime?
  lastLoginAt DateTime?
  isActive    Boolean   @default(true)

  refreshTokens RefreshToken[]

  @@unique([userId, deviceId])
  @@index([userId])
  @@index([deviceId])
  @@map("user_device_sessions")
}

model TwoFactorBackupCode {
  id     Int    @id @default(autoincrement())
  uuid   String @unique @default(uuid()) @db.Uuid
  code   String @unique @db.VarChar(64)
  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  used      Boolean   @default(false)
  usedAt    DateTime?
  ipAddress String?   @db.VarChar(45)
  userAgent String?   @db.VarChar(512)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, used])
  @@index([uuid])
  @@map("two_factor_backup_codes")
}

model Board {
  id         Int       @id @default(autoincrement())
  uuid       String    @unique @default(uuid()) @db.Uuid
  title      String    @db.VarChar(64)
  color      String    @default("FFFFFF") @db.VarChar(6)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isPinned   Boolean   @default(false)
  isFavorite Boolean   @default(false)
  isDeleted  Boolean   @default(false)
  deletedAt  DateTime?

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  tasks Task[]

  @@index([userId, title])
  @@index([userId, isDeleted])
  @@index([userId, isPinned, isFavorite, updatedAt])
  @@map("boards")
}

model Task {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique @default(uuid()) @db.Uuid
  title       String    @db.VarChar(64)
  description String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dueDate     DateTime?
  priority    Priority? @default(MEDIUM)
  status      Status?   @default(PENDING)
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?

  boardId Int
  board   Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@unique([boardId, title])
  @@index([boardId, isDeleted])
  @@map("tasks")
}

model RefreshToken {
  id         Int       @id @default(autoincrement())
  token      String    @unique @db.VarChar(2048)
  createdAt  DateTime  @default(now())
  expiresAt  DateTime
  revoked    Boolean   @default(false)
  ipAddress  String?   @db.VarChar(45)
  rememberMe Boolean   @default(false)
  lastUsedAt DateTime?

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  deviceSessionId Int?
  deviceSession   UserDeviceSession? @relation(fields: [deviceSessionId], references: [id])

  @@index([userId])
  @@index([userId, revoked])
  @@map("refresh_tokens")
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum UserRole {
  user
  admin
  moderator
  guest
}
